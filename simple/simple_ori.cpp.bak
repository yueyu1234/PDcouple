/* ----------------------------------------------------------------------
	Drive program for coupling of Peridynamics/Finite Element
	Fabiano F. Bargos
	Brown University/State University of Campinas
	November/2011

	This routine links LAMMPS
	(Large-scale Atomic/Molecular Massively Parallel Simulator
	www.cs.sandia.gov/~sjplimp/lammps.html
	Steve Plimpton, sjplimp@sandia.gov, Sandia National Laboratories)
	to a generic Finite Element Code.

	The implementation is based on the "c++_driver" available in LAMMPS.

	c++_driver = simple example of how an umbrella program
	can invoke LAMMPS as a library on some subset of procs
	Syntax: c++_driver P in.lammps
	P = # of procs to run LAMMPS on
	must be <= # of procs the driver code itself runs on
	in.lammps = LAMMPS input script
	See README for compilation instructions
------------------------------------------------------------------------- */

#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "mpi.h"
#include "lammps.h"         // these are LAMMPS include files
#include "input.h"
#include "atom.h"
#include "library.h"

#include "FE_Engine.h"
#include "MatrixLibrary.h"

#include <iostream>
using namespace std;
using namespace LAMMPS_NS;


// -------------------------------------------------------------
// Define functions */
// -------------------------------------------------------------
void ReadFEandPDFiles(double *PDCoords, DENS_VEC &lp_ext_nds_bc2PD,
		DENS_VEC &lp_int_nds_bc2FE,
		DENS_VEC &lp_ext_coo_bc2PD,
		DENS_VEC &lp_int_coo_bc2FE,
		DENS_VEC &lp_ov_nds);


// -------------------------------------------------------------
// Main Program */
// -------------------------------------------------------------
int main(int narg, char **arg)
{
	MPI_Init(&narg, &arg);

	// -------------------------------------------------------------
	// Lammps solver */
	// -------------------------------------------------------------
	int me = 0;
	int lammps = 1;

	// open LAMMPS input script
	
	FILE *fp;
	if (me == 0) {
//		fp = fopen(arg[1],"r");
		fp = stdin;
		if (fp == NULL) {
			printf("ERROR: Could not open LAMMPS input script\n");
			MPI_Abort(MPI_COMM_WORLD, 1);
		}
	}
	

	// run the input script thru LAMMPS one line at a time until end-of-file
	// driver proc 0 reads a line, Bcasts it to all procs
	// (could just send it to proc 0 of comm_lammps and let it Bcast)
	// all LAMMPS procs call input->one() on the line
	
	// Treating input args to pass to LAMMPS
	int narg_copy = 1;
	char** arg_copy;
	arg_copy    = (char**)malloc(1*sizeof(char*));
	arg_copy[0] =  (char*)malloc(100*sizeof(char));
	strcpy(arg_copy[0],arg[0]);

	
//	LAMMPS *lmp = new LAMMPS(narg, arg, MPI_COMM_WORLD);
	LAMMPS *lmp = new LAMMPS(narg_copy, arg_copy, MPI_COMM_WORLD);
	
	if (lammps == 1)  lmp->input->file();
	

	int natoms = static_cast<int> (lmp->atom->natoms);

	// Stores the initial position of the atoms
	double *x0 = new double[3*natoms];
	lammps_get_coords(lmp,x0);          // no LAMMPS class function for this

	// this is for convergence
	double *xn   = new double[3*natoms];
	double *xnn1 = new double[3*natoms];


	// Stores the position of the atoms
	double *x = new double[3*natoms];
	lammps_get_coords(lmp,x);          // no LAMMPS class function for this

	cout << "LAMMPS was set" << endl;
	fclose (fp);


	// -------------------------------------------------------------
	// Finite element solver */
	// -------------------------------------------------------------

	// Material definition
	double mu  = 10;
	double nu  = 0.33333333333333333333333;
	int ndof   = 2;
	int ncoord = 2;

	// Load
	double load = 1.0e-1;
//	double load = 0.0e0;

	FILE *File;

	// Open test file
	if((File = fopen(arg[1], "r")) == NULL) {
		cout << "Error in opening" << arg[0] << endl;
	}

	FE_Engine feEngine(File);
	feEngine.FEsetup(mu, nu, ndof, ncoord, load);
	cout << "FE was set" << endl;
	fclose (File);

	// -------------------------------------------------------------
	// Reads information of the overlapping */
	// -------------------------------------------------------------
	DENS_VEC lp_extrnl_nds_bc2PD;		// Stores the BC nodes
	DENS_VEC lp_extrnl_nds_bc2PDnew;	// Stores the BC nodes
	DENS_VEC lp_intrnl_nds_bc2FE;		// Stores the BC nodes
	DENS_VEC lp_intrnl_nds_bc2FEnew;	// Stores the BC nodes
	DENS_VEC lp_extrnl_coo_bc2PD;		// Stores the BC nodes coordinates
	DENS_VEC lp_intrnl_coo_bc2FE;		// Stores the BC nodes coordinates
	DENS_VEC fe_nds_bc2PD;				// Stores the BC nodes
	DENS_VEC fe_nds_bc2FE;				// Stores the BC nodes
	DENS_VEC dirichletpresc_values;		// Stores the BC nodes
	DENS_VEC lp_overl_nds;				// Stores the nodes in the overlapping

	ReadFEandPDFiles(x, lp_extrnl_nds_bc2PD,
			lp_intrnl_nds_bc2FE,
			lp_extrnl_coo_bc2PD,
			lp_intrnl_coo_bc2FE,
			lp_overl_nds);

	// -------------------------------------------------------------
	// Matching FE and PD overlapping area */
	// -------------------------------------------------------------
	fprintf ( stdout, "\n\n Finding FE nodes in the BC2PD region... \n" );
	feEngine.feMesh->get_Nodes(lp_extrnl_nds_bc2PD, lp_extrnl_coo_bc2PD, x, lp_extrnl_nds_bc2PDnew, fe_nds_bc2PD);

	fprintf ( stdout, "\n\n Finding FE nodes in the BC2FE region... \n" );
	feEngine.feMesh->get_Nodes(lp_intrnl_nds_bc2FE, lp_intrnl_coo_bc2FE, x, lp_intrnl_nds_bc2FEnew, fe_nds_bc2FE);

	// Set for each element which are the peridynamics nodes inside
	feEngine.feMesh->find_Nodes(lp_overl_nds, x);


	// -------------------------------------------------------------
	// Initial FE/PD loop */
	// -------------------------------------------------------------
	int offset3d, offset2d, idrch = 0, idrch2 = 0;
	DENS_VEC upCoords, upCoords2, fesol;

	// -------------------------------------------------------------
	// compute compute dirichlet bc */
	// -------------------------------------------------------------
	dirichletpresc_values.reset(ndof * fe_nds_bc2FE.size());
	DENS_MAT Coords;
	Coords =  feEngine.feMesh->nodal_coordinates();

	double *xdisp  = new double[3*natoms];
	for (int i = 0; i < 3*natoms; i++) xdisp[i]  = 0.0; // displacement from FE interpolated to PD

	int ntstp = 100;
	double theta = 0.0;

	// -------------------------------------------------------------
	// Main FE/PD loop */
	// -------------------------------------------------------------
	int mytsp = 0;
	for(int tstp = 0; tstp < ntstp; ++tstp) {

		// no LAMMPS class function for this
		lammps_get_coords(lmp,x);

		// -------------------------------------------------------------
		// compute compute dirichlet bc (FE) */
		// -------------------------------------------------------------
		//dirichletpresc_values.reset(ndof * fe_nds_bc2FE.size());
		idrch = 0;
		for(int i = 0; i < fe_nds_bc2FE.size(); ++i) {
			offset3d = 3 * lp_intrnl_nds_bc2FEnew(i);
			offset2d = ndof * fe_nds_bc2FE(i);
//			dirichletpresc_values(idrch) = theta*dirichletpresc_values(idrch++) + (1-theta)*(x[offset3d+0] - upCoords(offset2d+0));
//			dirichletpresc_values(idrch) = theta*dirichletpresc_values(idrch++) + (1-theta)*(x[offset3d+1] - upCoords(offset2d+1));
			dirichletpresc_values(idrch++) = ( x[offset3d+0] - Coords(0, fe_nds_bc2FE(i)) );
			dirichletpresc_values(idrch++) = ( x[offset3d+1] - Coords(1, fe_nds_bc2FE(i)) );
		}

		idrch = 0;
		for(int i = 0; i < 2*fe_nds_bc2FE.size(); ++i) {
			if (fabs(dirichletpresc_values(idrch)) < 1e-10) dirichletpresc_values(idrch++) = 0.0;
		}
		feEngine.FESolve(mytsp++, fe_nds_bc2FE, dirichletpresc_values, upCoords, fesol);


		// -------------------------------------------------------------
		// compute compute dirichlet bc (Lammps) */
		// -------------------------------------------------------------
		for (int i = 0; i < 3*natoms; i++) xdisp[i] = 0.0; // displacement from FE interpolated to PD

		feEngine.feMesh->interpolate_solution(lp_extrnl_nds_bc2PD, fesol, xdisp);

		for(int i = 0; i < 3*natoms; ++i) {
//			x[i] = x0[i] + theta*xdisp1[i] + (1-theta)*xdisp[i];
			x[i] = x0[i] + (1-theta)*xdisp[i];
		}
		int ntstpPDMax = 400;
                int PDloopi = 0.0;
		double PDtol = 1e-2;
		double S = 100.0;
		double S0 = 0.0;
		
		lammps_put_coords(lmp, x);		
		lmp->input->one("run 1");
		// no LAMMPS class function for this
		lammps_get_coords(lmp,xn);
		for(int j = 0; j < 3*natoms; ++j) {
		   S0 += (xn[j] - x[j]) * (xn[j] - x[j]);
		}
		for(int k = 0; k < 3*natoms; ++k) {
		   x[k] = xn[k];
		}

		while ((PDloopi < ntstpPDMax) && ( (S/S0) > PDtol)) {
			S = 0.0;			
			lammps_put_coords(lmp, x);			
			lmp->input->one("run 1");			
			// no LAMMPS class function for this
			lammps_get_coords(lmp,xn);

			for(int j = 0; j < 3*natoms; ++j) {
			   S += (xn[j] - x[j]) * (xn[j] - x[j]);
			}
    
			for(int k = 0; k < 3*natoms; ++k) {
			   x[k] = xn[k];
			}
			cout << "Iteration : " << PDloopi << endl;
			PDloopi += 1;
		}

	}	

	// Computes one more FE before finishing
	lammps_get_coords(lmp,x);

	// -------------------------------------------------------------
	// compute compute dirichlet bc (FE) */
	// -------------------------------------------------------------
	idrch = 0;
	for(int i = 0; i < fe_nds_bc2FE.size(); ++i) {
		offset3d = 3 * lp_intrnl_nds_bc2FEnew(i);
		offset2d = ndof * fe_nds_bc2FE(i);
//		dirichletpresc_values(idrch) = theta*dirichletpresc_values(idrch++) + (1-theta)*(x[offset3d+0] - upCoords(offset2d+0));
//		dirichletpresc_values(idrch) = theta*dirichletpresc_values(idrch++) + (1-theta)*(x[offset3d+1] - upCoords(offset2d+1));
		dirichletpresc_values(idrch++) = ( x[offset3d+0] - Coords(0, fe_nds_bc2FE(i)) );
		dirichletpresc_values(idrch++) = ( x[offset3d+1] - Coords(1, fe_nds_bc2FE(i)) );
	}

	idrch = 0;
	for(int i = 0; i < 2*fe_nds_bc2FE.size(); ++i) {
		if (fabs(dirichletpresc_values(idrch)) < 1e-10) dirichletpresc_values(idrch++) = 0.0;
	}
	feEngine.FESolve(mytsp++, fe_nds_bc2FE, dirichletpresc_values, upCoords2, fesol);

	// -------------------------------------------------------------
	// Ending codes */
	// -------------------------------------------------------------
	delete [] x;
	delete [] x0;
	delete [] xdisp;


	if (lammps == 1) delete lmp;

	printf("\n Ending test... \n");

	MPI_Finalize();
}


// -------------------------------------------------------------
// Define functions */
// -------------------------------------------------------------
void ReadFEandPDFiles(double *PDCoords, DENS_VEC &lp_ext_nds_bc2PD,
		DENS_VEC &lp_int_nds_bc2FE,
		DENS_VEC &lp_ext_coo_bc2PD,
		DENS_VEC &lp_int_coo_bc2FE,
		DENS_VEC &lp_ov_nds)
{

	int nodenum, lp_nNds_bc2PD, lp_nNds_bc2FE, lp_nNds_overl;
	int a1, offset;
	double ax, ay;
	char buf[100];

	FILE *File1, *File2, *File3;

	// Open test file
	if((File1 = fopen("dump_t1_GroupOut", "r")) == NULL) {
		cout << "Error in opening dump_t1_GroupOut" << endl;
	}

	// Open test file
	if((File2 = fopen("dump_t1_GroupIn", "r")) == NULL) {
		cout << "Error in opening dump_t1_GroupIn" << endl;
	}

	// Open test file
	if((File3 = fopen("dump_t1_GroupOver", "r")) == NULL) {
		cout << "Error in opening dump_t1_GroupOver" << endl;
	}

	/** Read Number nodes File1 */
	fgets(buf,100,File1);
	fgets(buf,100,File1);
	fscanf(File1, "%i", &a1);
	fgets(buf,100,File1);
	fscanf(File1, "%i", &lp_nNds_bc2PD);
	lp_ext_nds_bc2PD.reset(lp_nNds_bc2PD);
	lp_ext_coo_bc2PD.reset(2*lp_nNds_bc2PD);

	fgets(buf,100,File1);
	fgets(buf,100,File1);
	fgets(buf,100,File1);
	fscanf(File1, "%lf%lf", &ax, &ay);
	fscanf(File1, "%lf%lf", &ax, &ay);
	fscanf(File1, "%lf%lf", &ax, &ay);
	fgets(buf,100,File1);

	for (int inode=0; inode<lp_nNds_bc2PD; inode++)
	{
		fscanf(File1, "%i", &nodenum);
		lp_ext_nds_bc2PD(inode) = nodenum-1;
		offset = 3*(nodenum-1);
		lp_ext_coo_bc2PD(2*inode+0)=PDCoords[offset+0];
		lp_ext_coo_bc2PD(2*inode+1)=PDCoords[offset+1];
	}

	/** Read Number nodes File2 */
	fgets(buf,100,File2);
	fgets(buf,100,File2);
	fscanf(File2, "%i", &a1);
	fgets(buf,100,File2);
	fscanf(File2, "%i", &lp_nNds_bc2FE);
	lp_int_nds_bc2FE.reset(lp_nNds_bc2FE);
	lp_int_coo_bc2FE.reset(2*lp_nNds_bc2FE);

	fgets(buf,100,File2);
	fgets(buf,100,File2);
	fgets(buf,100,File2);
	fscanf(File2, "%lf%lf", &ax, &ay);
	fscanf(File2, "%lf%lf", &ax, &ay);
	fscanf(File2, "%lf%lf", &ax, &ay);
	fgets(buf,100,File2);

	for (int inode=0; inode<lp_nNds_bc2FE; inode++)
	{
		fscanf(File2, "%i", &nodenum);
		lp_int_nds_bc2FE(inode) = nodenum-1;
		offset = 3*(nodenum-1);
		lp_int_coo_bc2FE(2*inode+0)=PDCoords[offset+0];
		lp_int_coo_bc2FE(2*inode+1)=PDCoords[offset+1];
	}

	/** Read Number nodes File3  */
	fgets(buf,100,File3);
	fgets(buf,100,File3);
	fscanf(File3, "%i", &a1);
	fgets(buf,100,File3);
	fscanf(File3, "%i", &lp_nNds_overl);
	lp_ov_nds.reset(lp_nNds_overl);

	fgets(buf,100,File3);
	fgets(buf,100,File3);
	fgets(buf,100,File3);
	fscanf(File3, "%lf%lf", &ax, &ay);
	fscanf(File3, "%lf%lf", &ax, &ay);
	fscanf(File3, "%lf%lf", &ax, &ay);
	fgets(buf,100,File3);

	for (int inode=0; inode<lp_nNds_overl; inode++)
	{
		fscanf(File3, "%i", &nodenum);
		lp_ov_nds(inode) = nodenum-1;
	}

	fclose (File1);
	fclose (File2);
	fclose (File3);
}
